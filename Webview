# src/ui/main_window.py i√ßinde - import kƒ±smƒ±na ekle
try:
    import tkinterweb
    WEBVIEW_AVAILABLE = True
except ImportError:
    print("tkinterweb bulunamadƒ±. pip install tkinterweb ile y√ºkleyin")
    WEBVIEW_AVAILABLE = False

class DocumentViewer(ctk.CTkFrame):
    """Word dok√ºmanƒ±nƒ± g√∂r√ºnt√ºlemek i√ßin panel - WebView ile"""
    
    def __init__(self, parent):
        super().__init__(parent)
        
        self.current_html_file = None
        self.current_html_content = None
        self.setup_ui()
    
    def setup_ui(self):
        """Dok√ºman g√∂r√ºnt√ºleyici UI - WebView ile"""
        # Ba≈ülƒ±k
        title_label = ctk.CTkLabel(
            self,
            text="Word Dok√ºmanƒ±",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        title_label.pack(pady=(10, 5))
        
        # Buton √ßer√ßevesi
        button_frame = ctk.CTkFrame(self, fg_color="transparent")
        button_frame.pack(pady=5)
        
        # Dok√ºman y√ºkleme butonu
        self.load_button = ctk.CTkButton(
            button_frame,
            text="Dok√ºmanƒ± HTML'de A√ß",
            command=self.open_in_browser,
            state="disabled",
            width=150
        )
        self.load_button.pack(side="left", padx=5)
        
        # Yenile butonu
        self.refresh_button = ctk.CTkButton(
            button_frame,
            text="Yenile",
            command=self.refresh_webview,
            state="disabled",
            width=80
        )
        self.refresh_button.pack(side="left", padx=5)
        
        # WebView veya Text Area
        if WEBVIEW_AVAILABLE:
            # WebView kullan
            self.web_frame = ctk.CTkFrame(self)
            self.web_frame.pack(fill="both", expand=True, padx=10, pady=10)
            
            self.webview = tkinterweb.HtmlFrame(self.web_frame)
            self.webview.pack(fill="both", expand=True)
            
            # Ba≈ülangƒ±√ß HTML
            self.webview.load_html("""
            <html>
            <body style="font-family: Arial; padding: 20px; background-color: #2b2b2b; color: white;">
                <h3>Word Dok√ºmanƒ± G√∂r√ºnt√ºleyici</h3>
                <p>Word dosyasƒ± y√ºklendiƒüinde dok√ºman i√ßeriƒüi burada g√∂r√ºnecek.</p>
                <p><strong>√ñzellikler:</strong></p>
                <ul>
                    <li>Tam HTML formatting</li>
                    <li>Tablo yapƒ±sƒ± korunur</li>
                    <li>Scrollable i√ßerik</li>
                </ul>
            </body>
            </html>
            """)
            
        else:
            # Fallback - Text Area
            self.text_area = ctk.CTkTextbox(
                self,
                wrap="word",
                font=ctk.CTkFont(size=11)
            )
            self.text_area.pack(fill="both", expand=True, padx=10, pady=10)
            self.text_area.insert("1.0", "tkinterweb k√ºt√ºphanesi bulunamadƒ±.\nHTML g√∂r√ºnt√ºleme i√ßin: pip install tkinterweb")
            self.text_area.configure(state="disabled")
    
    def load_document(self, file_path: str):
        """Word dok√ºmanƒ±nƒ± y√ºkler ve WebView'da g√∂sterir"""
        try:
            print(f"Dok√ºman WebView'da y√ºkleniyor: {file_path}")
            
            if WEBVIEW_AVAILABLE:
                # Loading mesajƒ± g√∂ster
                self.webview.load_html("""
                <html>
                <body style="font-family: Arial; padding: 20px; background-color: #2b2b2b; color: white;">
                    <h3>Y√ºkleniyor...</h3>
                    <p>Word dok√ºmanƒ± i≈üleniyor, l√ºtfen bekleyin...</p>
                </body>
                </html>
                """)
            
            # Word dok√ºmanƒ±nƒ± i≈üle
            with open(file_path, "rb") as docx_file:
                try:
                    # Mammoth ile HTML'e √ßevir
                    result = mammoth.convert_to_html(docx_file)
                    
                    if hasattr(result, 'value'):
                        html_content = result.value
                    elif hasattr(result, 'html'):
                        html_content = result.html
                    else:
                        raise Exception("HTML content bulunamadƒ±")
                    
                    # Styled HTML olu≈ütur
                    styled_html = self.create_styled_html(html_content, file_path)
                    self.current_html_content = styled_html
                    
                    if WEBVIEW_AVAILABLE:
                        # WebView'da g√∂ster
                        self.webview.load_html(styled_html)
                        self.refresh_button.configure(state="normal")
                    
                    # HTML dosyasƒ± da olu≈ütur (tarayƒ±cƒ±da a√ßmak i√ßin)
                    self.create_html_file(styled_html, file_path)
                    
                    # Butonlarƒ± aktif et
                    self.load_button.configure(state="normal")
                    
                    print("‚úì Dok√ºman WebView'da ba≈üarƒ±yla y√ºklendi")
                    
                except Exception as e:
                    print(f"HTML d√∂n√º≈üt√ºrme hatasƒ±: {e}")
                    if WEBVIEW_AVAILABLE:
                        # Fallback - basit text g√∂ster
                        self.show_text_in_webview(file_path)
                    
        except Exception as e:
            error_msg = f"Dok√ºman y√ºkleme hatasƒ±: {str(e)}"
            print(error_msg)
            
            if WEBVIEW_AVAILABLE:
                self.webview.load_html(f"""
                <html>
                <body style="font-family: Arial; padding: 20px; background-color: #2b2b2b; color: #ff6b6b;">
                    <h3>Hata!</h3>
                    <p>{error_msg}</p>
                </body>
                </html>
                """)
    
    def create_styled_html(self, html_content: str, file_path: str) -> str:
        """HTML i√ßeriƒüini g√ºzel stillendirme"""
        file_name = Path(file_path).stem
        
        styled_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Word Dok√ºmanƒ± - {file_name}</title>
            <style>
                body {{ 
                    font-family: 'Segoe UI', Arial, sans-serif; 
                    margin: 20px; 
                    line-height: 1.6;
                    background-color: #2b2b2b;
                    color: #ffffff;
                }}
                h1, h2, h3 {{
                    color: #4fc3f7;
                    border-bottom: 2px solid #4fc3f7;
                    padding-bottom: 5px;
                }}
                table {{ 
                    border-collapse: collapse; 
                    width: 100%; 
                    margin: 15px 0;
                    background-color: #3b3b3b;
                    border-radius: 5px;
                    overflow: hidden;
                }}
                th, td {{ 
                    border: 1px solid #555; 
                    padding: 12px 8px; 
                    text-align: left;
                }}
                th {{ 
                    background-color: #4fc3f7; 
                    font-weight: bold;
                    color: #000;
                }}
                tr:nth-child(even) {{
                    background-color: #404040;
                }}
                tr:hover {{
                    background-color: #505050;
                }}
                p {{
                    margin: 10px 0;
                }}
                .header {{
                    text-align: center;
                    margin-bottom: 30px;
                    padding: 20px;
                    background-color: #404040;
                    border-radius: 10px;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üìã Word Dok√ºmanƒ±</h1>
                <h2>{file_name}</h2>
            </div>
            {html_content}
        </body>
        </html>
        """
        
        return styled_html
    
    def show_text_in_webview(self, file_path: str):
        """Fallback - text'i webview'da g√∂ster"""
        try:
            doc = Document(file_path)
            
            # Text content topla
            text_content = ""
            for para in doc.paragraphs:
                if para.text.strip():
                    text_content += f"<p>{para.text}</p>"
            
            # Tablolarƒ± HTML olarak ekle
            table_html = ""
            for i, table in enumerate(doc.tables):
                table_html += f"<h3>Tablo {i+1}</h3><table>"
                for row in table.rows:
                    table_html += "<tr>"
                    for cell in row.cells:
                        table_html += f"<td>{cell.text}</td>"
                    table_html += "</tr>"
                table_html += "</table>"
            
            full_html = f"""
            <html>
            <body style="font-family: Arial; padding: 20px; background-color: #2b2b2b; color: white;">
                <h2>Word Dok√ºmanƒ± (Text Modu)</h2>
                {text_content}
                {table_html}
            </body>
            </html>
            """
            
            self.webview.load_html(full_html)
            
        except Exception as e:
            print(f"Text webview hatasƒ±: {e}")
    
    def refresh_webview(self):
        """WebView'ƒ± yenile"""
        if WEBVIEW_AVAILABLE and self.current_html_content:
            self.webview.load_html(self.current_html_content)
            print("WebView yenilendi")
    
    # create_html_file ve open_in_browser metodlarƒ± aynƒ± kalacak...
